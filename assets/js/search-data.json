{
  
    
        "post0": {
            "title": "sympy Laplace Transforms for solving linear ODEs",
            "content": "from sympy import * import MATH280 x = Function(&quot;x&quot;) t,s = symbols(&quot;t s&quot;,real=True, nonnegative=true ) . MATH280 . Current sympy version 1.9 and hoping for a fix soon . A famously intense pen-and-paper technique from elementary ODEs class: Laplace Transforms. Sympy v1.9 has Laplace capabilities built-in, but with maddening shortcomings. This may be addressed in an upcomming new version. I see in the pre-release notes for sympy 1.10 &quot;The Laplace transform is now rule-based, can transform a far wider range of expressions, and works better with undefined functions, including the ability to transform differential equations. &quot; . Let&#39;s work with a 2nd order, linear, constant-coefficient, nonhomogeous IVP: $$ ddot{x}+3 dot{x}+4x = sin(2t), ; ; ; ; ; ; x(0)=1, dot{x}(0)=0$$ . ode = Eq(x(t).diff(t,2)+3*x(t).diff(t)+4*x(t) , sin(2*t) ) ode . $ displaystyle 4 x{ left(t right)} + 3 frac{d}{d t} x{ left(t right)} + frac{d^{2}}{d t^{2}} x{ left(t right)} = sin{ left(2 t right)}$ laplace_transform() in sympy 1.9 . First let&#39;s see how the built-in sympy laplace_transform() handles that equation: . laplace_transform(ode,t,s) . AttributeError Traceback (most recent call last) Input In [3], in &lt;module&gt; -&gt; 1 laplace_transform(ode,t,s) File ~ AppData Local Programs Python Python310 lib site-packages sympy integrals transforms.py:1256, in laplace_transform(f, t, s, legacy_matrix, **hints) 1253 else: 1254 return type(f)(*f.shape, elements_trans) -&gt; 1256 return LaplaceTransform(f, t, s).doit(**hints) File ~ AppData Local Programs Python Python310 lib site-packages sympy integrals transforms.py:180, in IntegralTransform.doit(self, **hints) 174 raise IntegralTransformError( 175 self.__class__._name, self.function, &#39;needeval&#39;) 177 # TODO handle derivatives etc 178 179 # pull out constant coefficients --&gt; 180 coeff, rest = fn.as_coeff_mul(self.function_variable) 181 return coeff*self.__class__(*([Mul(*rest)] + list(self.args[1:]))) AttributeError: &#39;Equality&#39; object has no attribute &#39;as_coeff_mul&#39; . Look at that! &#39;Equality&#39; object has no attribute. laplace_transform() would prefer that we assume the expression we enter is equal to 0: . Lx=laplace_transform(x(t).diff(t,2)+3*x(t).diff(t)+4*x(t) - sin(2*t),t,s) Lx . (4*LaplaceTransform(x(t), t, s) + 3*LaplaceTransform(Derivative(x(t), t), t, s) + LaplaceTransform(Derivative(x(t), (t, 2)), t, s) - 2/(s**2 + 4), 0, True) . We see the output above is a tuple that includes some conditional statements at the end. To hide that and see just the transform itself, use the option noconds=True . Lx=laplace_transform(x(t).diff(t,2)+3*x(t).diff(t)+4*x(t) - sin(2*t),t,s,noconds=True) Lx . $ displaystyle 4 mathcal{L}_{t} left[x{ left(t right)} right] left(s right) + 3 mathcal{L}_{t} left[ frac{d}{d t} x{ left(t right)} right] left(s right) + mathcal{L}_{t} left[ frac{d^{2}}{d t^{2}} x{ left(t right)} right] left(s right) - frac{2}{s^{2} + 4}$ Laplace Transform and Derivatives . Notice in that output another hassle: laplace_transform() ignores the single most useful property of the Laplace Transform: $$ { cal L} {x&#39;(t) } = s{ cal L} {x(t) } - x(0), mbox{ and } { cal L} {x&#39;&#39;(t) } = s^2{ cal L} {x(t) } - sx(0)- x&#39;(0).$$ . laplace() in MATH280 . We&#39;ve reworked that and included an alternative laplace() in the MATH280 Module. . Solving an equation with Laplace Transforms in four steps: . 1. take the transform of everything . L = MATH280.laplace(ode,t,s) L . $ displaystyle s^{2} mathcal{L}_{t} left[x{ left(t right)} right] left(s right) + 3 s mathcal{L}_{t} left[x{ left(t right)} right] left(s right) - s x{ left(0 right)} + 4 mathcal{L}_{t} left[x{ left(t right)} right] left(s right) - 3 x{ left(0 right)} - left. frac{d}{d t} x{ left(t right)} right|_{ substack{ t=0 }} = frac{2}{s^{2} + 4}$ 2. plug in the initial conditions . The second step in solving the equation is to plug in the initial conditions: . L0=L.subs(x(0),1).subs(Subs(Derivative(x(t), t), t, 0),0) L0 . $ displaystyle s^{2} mathcal{L}_{t} left[x{ left(t right)} right] left(s right) + 3 s mathcal{L}_{t} left[x{ left(t right)} right] left(s right) - s + 4 mathcal{L}_{t} left[x{ left(t right)} right] left(s right) - 3 = frac{2}{s^{2} + 4}$ 3. solve for the lapace transform of the solution function . The third step is to solve the resulting equation for the symbol ${ cal L} {x(t) }$ . Lx=solve(L0,LaplaceTransform(x(t),t,s)) Lx . [(s**3 + 3*s**2 + 4*s + 14)/(s**4 + 3*s**3 + 8*s**2 + 12*s + 16)] . 4. look up the laplace transform to determine the solution . The fourth and final step is to &quot;look up&quot; that complicated expression in the variable $s$ to determine the function of $t$ with that Laplace transform. The built-in sympy funtion inverse_laplace_transform() works fine for that, with the slight annoyance that it doesn&#39;t align perfectly with the list format of output from solve(). So I&#39;ve included in MATH280 a little wrapper called laplaceInv() that extracts the zeroth entry from that list. I&#39;ve noticed that this step can run really slowly. . sol = MATH280.laplaceInv(Lx,s,t) sol . $ displaystyle - frac{ cos{ left(2 t right)} theta left(t right)}{6} + frac{ sqrt{7} e^{- frac{3 t}{2}} sin{ left( frac{ sqrt{7} t}{2} right)} theta left(t right)}{2} + frac{7 e^{- frac{3 t}{2}} cos{ left( frac{ sqrt{7} t}{2} right)} theta left(t right)}{6}$ Something to notice is that every term as a $ theta(t)$. That&#39;s the unit step function: $ theta(t)=1$ if $t gt 0$ and otherwise zero. Seems to be enforcing the assumption that our solution only makes sense for nonnegative time $t$. . We can plot the solution with sympy plot: . plot(sol,(t,0,20)) . &lt;sympy.plotting.plot.Plot at 0x2b67c954d90&gt; . And just in case there was any doubt, we notice that dsolve() produces the same solution. . dsolve(ode,x(t),ics={x(0):1, x(t).diff(t).subs(t,0):0}) . $ displaystyle x{ left(t right)} = left( frac{ sqrt{7} sin{ left( frac{ sqrt{7} t}{2} right)}}{2} + frac{7 cos{ left( frac{ sqrt{7} t}{2} right)}}{6} right) e^{- frac{3 t}{2}} - frac{ cos{ left(2 t right)}}{6}$ Discontinuous Forcing Functions . We haven&#39;t yet explored what I think is the reason to consider Laplace Transforms in the first place: discontinuous forcing functions. . A first-order model with a square wave switch function . Suppose we model a capacitor with an external voltage source that switches on at $t=2$ and off at $t=5$. The equation, in some idealized units, could be $$ dot{x} - x = theta(t-2) - theta(t-5), ; ; ; ; ; x(0)=0 $$ where $ theta(t-a)$ is the Heaviside unit step function that turns on at $t=a$. . capmodel = Eq(x(t).diff(t)+x(t), Heaviside(t-2)-Heaviside(t-5)) capmodel . $ displaystyle x{ left(t right)} + frac{d}{d t} x{ left(t right)} = - theta left(t - 5 right) + theta left(t - 2 right)$ We&#39;ll complete the four steps as in the previous example: . L=MATH280.laplace(capmodel,t,s) L . $ displaystyle s mathcal{L}_{t} left[x{ left(t right)} right] left(s right) + mathcal{L}_{t} left[x{ left(t right)} right] left(s right) - x{ left(0 right)} = frac{e^{- 2 s}}{s} - frac{e^{- 5 s}}{s}$ L0=L.subs(x(0),0) L0 . $ displaystyle s mathcal{L}_{t} left[x{ left(t right)} right] left(s right) + mathcal{L}_{t} left[x{ left(t right)} right] left(s right) = frac{e^{- 2 s}}{s} - frac{e^{- 5 s}}{s}$ Ls=solve(L0,LaplaceTransform(x(t),t,s)) Ls . [(exp(3*s) - 1)*exp(-5*s)/(s*(s + 1))] . capsol=MATH280.laplaceInv(Ls,s,t) capsol . $ displaystyle - theta left(t - 5 right) + theta left(t - 2 right) + e^{5} e^{- t} theta left(t - 5 right) - e^{2} e^{- t} theta left(t - 2 right)$ The functional form of the solution looks a little opaque, so lets make a plot of the solution together with the right hand side function: . plot(capsol, Heaviside(t-2)-Heaviside(t-5), (t,0,15),) . &lt;sympy.plotting.plot.Plot at 0x2b67dc15330&gt; . A second-order example with a delta function . Here&#39;s an example from the undergraduate ODE textbook by Blanchard, Devaney and Hall: $$ ddot{x} +2 dot{x}+3x= delta(t-1)+3 delta(t-4), ; ; ; ; ; x(0)=0, dot{x}(0)=0$$ . ode2 = Eq(x(t).diff(t,2)+2*x(t).diff(t)+3*x(t),DiracDelta(t-1)+3*DiracDelta(t-4)) ode2 . $ displaystyle 3 x{ left(t right)} + 2 frac{d}{d t} x{ left(t right)} + frac{d^{2}}{d t^{2}} x{ left(t right)} = 3 delta left(t - 4 right) + delta left(t - 1 right)$ L=MATH280.laplace(ode2,t,s) L . $ displaystyle s^{2} mathcal{L}_{t} left[x{ left(t right)} right] left(s right) + 2 s mathcal{L}_{t} left[x{ left(t right)} right] left(s right) - s x{ left(0 right)} + 3 mathcal{L}_{t} left[x{ left(t right)} right] left(s right) - 2 x{ left(0 right)} - left. frac{d}{d t} x{ left(t right)} right|_{ substack{ t=0 }} = e^{- s} + 3 e^{- 4 s}$ Ls=L.subs(x(0),0).subs(Subs(Derivative(x(t), t), t, 0),0) Ls . $ displaystyle s^{2} mathcal{L}_{t} left[x{ left(t right)} right] left(s right) + 2 s mathcal{L}_{t} left[x{ left(t right)} right] left(s right) + 3 mathcal{L}_{t} left[x{ left(t right)} right] left(s right) = e^{- s} + 3 e^{- 4 s}$ Lx=solve(Ls,LaplaceTransform(x(t),t,s)) Lx . [(exp(3*s) + 3)*exp(-4*s)/(s**2 + 2*s + 3)] . sol2 = MATH280.laplaceInv(Lx,s,t) sol2 . $ displaystyle frac{3 sqrt{2} e^{4} e^{- t} sin{ left( sqrt{2} t right)} cos{ left(4 sqrt{2} right)} theta left(t - 4 right)}{2} + frac{ sqrt{2} e e^{- t} sin{ left( sqrt{2} t - sqrt{2} right)} theta left(t - 1 right)}{2} - frac{3 sqrt{2} e^{4} e^{- t} sin{ left(4 sqrt{2} right)} cos{ left( sqrt{2} t right)} theta left(t - 4 right)}{2}$ plot(sol2,(t,0,20)) . &lt;sympy.plotting.plot.Plot at 0x2b67d9b30d0&gt; . We can see in the plot above how the impulses at $t=1$ and $t=4$ energize the system. .",
            "url": "https://ejbarth.github.io/PythonMathClassroom/math280/2022/02/22/LaplaceTransform.html",
            "relUrl": "/math280/2022/02/22/LaplaceTransform.html",
            "date": " • Feb 22, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Oh, the things we can do with a 2D nonlinear system",
            "content": "In my differential equations class, we use python for symbolic computation by default, explicitly calling on other libraries as needed. We&#39;ve written and collected a collection of utilities in the MATH280 module for some tasks that weren&#39;t implemented (to our knowledge) or felt awkward. We&#39;ll test drive a few of those features here as we explore the behavior of a 2-dimensional nonlinear equation. . from sympy import * . Some traditional symbolic analysis . We&#39;ll first define the symbolic system of nonlinear equations and use the symbolic solve() to find equilibrium solutions . x,y=symbols(&quot;x y&quot;) f1=-2*x-y**2 f2=x-2*y eqs=solve([f1,f2],[x,y]) eqs . [(-8, -4), (0, 0)] . We can symbolically generate the linearization matrix by manipulating our original functions $f_1(x,y)$ and $f_2(x,y)$ and check the eigenvalues at the equilibria, noting that $(0,0)$ is stable and $(8, -4)$ is an unstable saddle. . L=Matrix([[f1.diff(x),f1.diff(y)],[f2.diff(x),f2.diff(y)]]) L . $ displaystyle left[ begin{matrix}-2 &amp; - 2 y 1 &amp; -2 end{matrix} right]$ L.subs({x:eqs[1][0],y:eqs[1][1]}).eigenvals() . {-2: 2} . L.subs({x:eqs[0][0],y:eqs[0][1]}).eigenvals() . {-2*sqrt(2) - 2: 1, -2 + 2*sqrt(2): 1} . Especially when we can&#39;t find equilibrium solutions symbolically, zero isoclines can be really helpful in understanding qualitative behavior of solutions, and the task requires less from solve() . isocline1=solve(f1,y) isocline2=solve(f2,y) isocline1, isocline2 . ([-sqrt(2)*sqrt(-x), sqrt(2)*sqrt(-x)], [x/2]) . We can use the sympy plot() to draw the graphs of the symbolic zero isocline expressions returned by solve() . plot(isocline1[0], isocline1[1], isocline2[0], xlim=(-10,1),line_color=&quot;blue&quot;) . &lt;sympy.plotting.plot.Plot at 0x1ebd30665f0&gt; . Direction Fields for Symbolic Expressions . In the MATH280 module, we&#39;ve included a direction field plotter drawdf() that bridges the symbolic/numeric divide. drawdf() takes a symbolic expression and draws a direction field plot using numerical data generated behind the scenes. An axis handle is returned so that further changes to the plot can be made. Below, we draw the direction field for the 2D system, along with a few representative solutions using the soln_at option. Then the zero isoclines are plotted on the same set of axes. . import MATH280 from numpy import linspace, sqrt xx=linspace(-10,0,100) ax=MATH280.drawdf([f1,f2],[x,-10,1],[y,-6,1],soln_at=[[-8,1],[2,-5],[-4,-6]]) ax.plot(xx,xx/2,&quot;b--&quot;) ax.plot(xx,-sqrt(2)*sqrt(-xx),&quot;r-.&quot;,xx,sqrt(2)*sqrt(-xx),&quot;r-.&quot;) . [&lt;matplotlib.lines.Line2D at 0x1ebe3ef9e40&gt;, &lt;matplotlib.lines.Line2D at 0x1ebe3ef9f60&gt;] . Numerical Solution for Symbolic Equations . We&#39;d like to have the ability to easily call for a numerical solution of symbolic equation. In the MATH280 module, we&#39;ve included two numerical solvers (based on scipy.integrate.solve_ivp()) that, like: drawdf() bridge the symbolic/numeric divide: . rkf45(symbolic_rhs_expression,dep_vars_list,dep_vars_initvals,ind_var_list): for general use | BDF(symbolic_rhs_expression,dep_vars_list,dep_vars_initvals,ind_var_list): for equations known to be stiff | . t=symbols(&quot;t&quot;) ns=MATH280.rkf45([f1,f2],[x,y],[-3,2],[t,0,10]) . Having jumped the gap from symbolics and numerics, the output ns is a list of numerical arrays. We&#39;ll plot with matplotlib . import matplotlib.pyplot as plt plt.plot(ns[0],ns[1][0],ns[0],ns[1][1]) . [&lt;matplotlib.lines.Line2D at 0x1ebe3e09870&gt;, &lt;matplotlib.lines.Line2D at 0x1ebe3e098d0&gt;] . Of course, we could call solve_ivp() directly with a defined right-hand-side function: . def vrhs(t,xy): return [-2*xy[0]-xy[1]**2, xy[0] - 2*xy[1]] from scipy.integrate import solve_ivp nsol=solve_ivp(vrhs,[0, 5],[2,-2]) . plt.plot(nsol.t,nsol.y[0]) plt.plot(nsol.t,nsol.y[1]) . [&lt;matplotlib.lines.Line2D at 0x1ebe3e70d30&gt;] .",
            "url": "https://ejbarth.github.io/PythonMathClassroom/math280/2022/02/19/Nonlinear2DSystem.html",
            "relUrl": "/math280/2022/02/19/Nonlinear2DSystem.html",
            "date": " • Feb 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "First Post",
            "content": "A big part of the workflow students in my python-based mathematics classes is to create clear, beautiful documents with Jupyter. For that reason, I&#39;ll use Jupyter to generate all the content in PythonMathClassroom. . The decision to host the blog from githup fastpages came down to the ease with which Jupyter content can go up on that platform without any intermediate fuss. . The first post ought to have some python mathematics, so here we go: . Let&#39;s use the sympy library to compute and plot some functions related to $x^2e^{-x}$ . from sympy import * x, y = symbols(&quot;x y&quot;) ii=integrate(x**2*exp(-x),x) ii . $ displaystyle left(- x^{2} - 2 x - 2 right) e^{- x}$ diff(ii,x) . $ displaystyle left(- 2 x - 2 right) e^{- x} - left(- x^{2} - 2 x - 2 right) e^{- x}$ expand(_) . $ displaystyle x^{2} e^{- x}$ solve(x**2*exp(-x)- 3/10 ,x) . [-0.439637356954377, 0.829068989148422, 3.95284287457532] . plot(x**2*exp(-x),3/10,(x,-.6,10)) . &lt;sympy.plotting.plot.Plot at 0x2367c111a20&gt; .",
            "url": "https://ejbarth.github.io/PythonMathClassroom/2022/02/18/FirstPost.html",
            "relUrl": "/2022/02/18/FirstPost.html",
            "date": " • Feb 18, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ejbarth.github.io/PythonMathClassroom/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ejbarth.github.io/PythonMathClassroom/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I teach lots of undergraduate students each year in Ordinary Differential Equations, Multivariable Calculus, Complex Variables, and Applied Statistics. Since 2016, I’ve been using the free open-source computer algebra system Maxima in the Multivariable Calculus and ODEs courses. To document the learning my students and I have done in Maxima, I created the blog TheMaximalist.org. That site serves our needs by giving us a place to write down the things we learn so that my students and I can refer back to them. Over the years, that site has become a little bit popular with other Maxima users around the world, getting about 30,000 visits a year. . Two things that bug me about Maxima: . There isn’t an obvious way for novices to install Maxima in macOS — that affects about half my students in each class. In fact over 30% of the traffic on TheMaximalist.org flows directly to my “My macOS Installation”. | Maxima has a small enough user base that my students don’t get much resume “wow” from their experience in that platform. | . A few months ago a student mentioned that she was planning to spend some time learning Python before she started applying for jobs after graduation. We thought “let’s explore the idea of migrating our classroom work from Maxima to Python!”. This blog serves the purpose of a big paper weight to collect what we learn along the way. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ejbarth.github.io/PythonMathClassroom/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ejbarth.github.io/PythonMathClassroom/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}